import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)
random.seed(42)

def generate_carriers():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö"""
    carriers = [
        "TransLog Express", "RussiaCargo", "LogiMaster", "DeliveryPro", "CargoFast",
        "TransService", "ExpressWay", "CargoLink", "LogiTrans", "QuickShip",
        "MegaCargo", "SpeedyTrans", "ReliableCargo", "FastTrack", "CargoExpert"
    ]
    
    data = []
    for i, name in enumerate(carriers, 1):
        data.append({
            'carrier_id': i,
            'name': name,
            'avg_rating': round(np.random.normal(4.2, 0.8), 1),
            'fleet_size': np.random.randint(10, 150),
            'reliability_score': round(np.random.uniform(0.7, 0.98), 2)
        })
    
    return pd.DataFrame(data)

def generate_warehouses():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–ª–∞–¥–∞—Ö"""
    regions = ["–ú–æ—Å–∫–≤–∞", "–°–ü–ë", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", 
               "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–ü–µ—Ä–º—å", "–í–æ—Ä–æ–Ω–µ–∂"]
    
    data = []
    for i, region in enumerate(regions, 1):
        capacity = np.random.randint(1000, 5000)
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∫–ª–∞–¥—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏
        if i in [3, 7, 9]:  # 3 —Å–∫–ª–∞–¥–∞ —Å –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
            current_load = int(capacity * np.random.uniform(0.85, 0.95))
        else:
            current_load = int(capacity * np.random.uniform(0.4, 0.8))
            
        data.append({
            'warehouse_id': i,
            'region': region,
            'capacity': capacity,
            'current_load': current_load,
            'utilization_rate': round(current_load / capacity, 2)
        })
    
    return pd.DataFrame(data)

def generate_routes():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö"""
    cities = ["–ú–æ—Å–∫–≤–∞", "–°–ü–ë", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", 
              "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–ü–µ—Ä–º—å", "–í–æ—Ä–æ–Ω–µ–∂"]
    
    data = []
    route_id = 1
    
    for start_city in cities:
        for end_city in cities:
            if start_city != end_city:
                # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (—É—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã)
                base_distance = np.random.randint(200, 2000)
                
                # –í—Ä–µ–º—è –≤ –ø—É—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
                avg_time = base_distance / np.random.uniform(40, 80) + np.random.uniform(2, 12)
                
                # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏
                avg_cost = base_distance * np.random.uniform(15, 35) + avg_time * np.random.uniform(500, 1500)
                
                data.append({
                    'route_id': route_id,
                    'start_point': start_city,
                    'end_point': end_city,
                    'distance_km': base_distance,
                    'avg_time_hours': round(avg_time, 1),
                    'avg_cost_rub': round(avg_cost, 2)
                })
                route_id += 1
    
    return pd.DataFrame(data)

def generate_shipments(routes_df, carriers_df, warehouses_df, num_shipments=5000):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö"""
    data = []
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    start_date = datetime.now() - timedelta(days=180)
    
    for i in range(1, num_shipments + 1):
        route = routes_df.sample(1).iloc[0]
        carrier = carriers_df.sample(1).iloc[0]
        
        # –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        ship_date = start_date + timedelta(days=np.random.randint(0, 180))
        
        # –ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
        planned_hours = route['avg_time_hours'] + np.random.uniform(-2, 6)
        planned_delivery = ship_date + timedelta(hours=planned_hours)
        
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (—Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–µ–∫)
        delay_factor = 1 - carrier['reliability_score']
        if np.random.random() < delay_factor:
            # –ï—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞
            delay_hours = np.random.exponential(8)
            actual_delivery = planned_delivery + timedelta(hours=delay_hours)
            status = "–ó–∞–¥–µ—Ä–∂–∫–∞" if delay_hours > 4 else "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        else:
            # –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Å—Ä–æ–∫ –∏–ª–∏ —Ä–∞–Ω—å—à–µ
            actual_delivery = planned_delivery + timedelta(hours=np.random.uniform(-1, 1))
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        
        # –í–µ—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞
        weight = np.random.uniform(100, 5000)
        cargo_value = weight * np.random.uniform(500, 3000)
        
        data.append({
            'shipment_id': i,
            'ship_date': ship_date.strftime('%Y-%m-%d'),
            'planned_delivery': planned_delivery.strftime('%Y-%m-%d %H:%M'),
            'actual_delivery': actual_delivery.strftime('%Y-%m-%d %H:%M'),
            'weight_kg': round(weight, 1),
            'cargo_value_rub': round(cargo_value, 2),
            'sender': f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å_{np.random.randint(1, 100)}",
            'receiver': f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å_{np.random.randint(1, 100)}",
            'route_id': route['route_id'],
            'carrier_id': carrier['carrier_id'],
            'status': status,
            'delivery_cost': round(route['avg_cost_rub'] * np.random.uniform(0.8, 1.2), 2)
        })
    
    return pd.DataFrame(data)

def generate_delays(routes_df, shipments_df):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö"""
    delay_reasons = [
        "–ü—Ä–æ–±–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö", "–ü–æ–ª–æ–º–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", "–ü–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞", 
        "–ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ç–∞–º–æ–∂–Ω–µ", "–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–∫–ª–∞–¥–∞", "–ù–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π",
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã", "–î–¢–ü –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ", "–ó–∞–±–∞—Å—Ç–æ–≤–∫–∞", "–ö–∞—Ä–∞–Ω—Ç–∏–Ω–Ω—ã–µ –º–µ—Ä—ã"
    ]
    
    data = []
    delay_id = 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏
    delayed_shipments = shipments_df[shipments_df['status'] == '–ó–∞–¥–µ—Ä–∂–∫–∞']
    
    for _, shipment in delayed_shipments.iterrows():
        planned = pd.to_datetime(shipment['planned_delivery'])
        actual = pd.to_datetime(shipment['actual_delivery'])
        delay_hours = (actual - planned).total_seconds() / 3600
        
        if delay_hours > 1:  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            data.append({
                'delay_id': delay_id,
                'route_id': shipment['route_id'],
                'date': shipment['ship_date'],
                'reason': np.random.choice(delay_reasons),
                'delay_hours': round(delay_hours, 1),
                'shipment_id': shipment['shipment_id']
            })
            delay_id += 1
    
    return pd.DataFrame(data)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ Lancaster Group...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞—Ö...")
    carriers_df = generate_carriers()
    carriers_df.to_csv('data/carriers.csv', index=False, encoding='utf-8')
    
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö...")
    warehouses_df = generate_warehouses()
    warehouses_df.to_csv('data/warehouses.csv', index=False, encoding='utf-8')
    
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö...")
    routes_df = generate_routes()
    routes_df.to_csv('data/routes.csv', index=False, encoding='utf-8')
    
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö...")
    shipments_df = generate_shipments(routes_df, carriers_df, warehouses_df)
    shipments_df.to_csv('data/shipments.csv', index=False, encoding='utf-8')
    
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö...")
    delays_df = generate_delays(routes_df, shipments_df)
    delays_df.to_csv('data/delays.csv', index=False, encoding='utf-8')
    
    print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ:")
    print(f"- carriers.csv: {len(carriers_df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"- warehouses.csv: {len(warehouses_df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"- routes.csv: {len(routes_df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"- shipments.csv: {len(shipments_df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"- delays.csv: {len(delays_df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"- –î–æ–ª—è –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫: {(shipments_df['status'] == '–ó–∞–¥–µ—Ä–∂–∫–∞').mean():.1%}")
    print(f"- –°—Ä–µ–¥–Ω—è—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–æ–≤: {warehouses_df['utilization_rate'].mean():.1%}")
    print(f"- –°–∫–ª–∞–¥—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π >85%: {(warehouses_df['utilization_rate'] > 0.85).sum()}")

if __name__ == "__main__":
    main()